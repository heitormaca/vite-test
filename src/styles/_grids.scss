$gap-horizontal: var(--space-sm);
$gap-vertical: $gap-horizontal;

@mixin grid {
  // fallback for IE
  &::before,
  &::after {
    content: '';
    display: table;
  }

  &::after {
    clear: both;
  }

  > * {
    float: left;
    margin-right: $gap-horizontal;
    margin-bottom: $gap-vertical;
  }

  @supports (grid-area: auto) {
    display: grid;
    gap: $gap-vertical $gap-horizontal;

    &::after,
    &::before {
      content: none;
    }

    > * {
      margin-right: 0;
      margin-bottom: 0;
    }
  }
}

@mixin gridAuto($min-width, $fallback: 3) {
  > * {
    float: left;
    width: calc(100% /#{$fallback} - #{$gap-horizontal});

    &:nth-child(#{$fallback}n + 1) {
      clear: both;
    }
  }

  @supports (grid-area: auto) {
    grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));

    > * {
      width: auto;
      margin: 0;
    }
  }
}

// O layout Ã© baseado em uma grid de 12 colunas i.e $grid-columns
@mixin gridLayout($cols...) {
  $i: 1;

  @each $col in $cols {
    > :nth-of-type(#{$i}) {
      width: calc(#{round-width(nth($col, 1))} - #{$gap-horizontal});
    }

    $i: $i + 1;
  }

  @supports (grid-area: auto) {
    $grid-columns: 12;

    grid-template-columns: repeat($grid-columns, 1fr);

    $i: 1;

    @each $col in $cols {
      > :nth-of-type(#{$i}) {
        grid-column-end: span nth($col, 1);

        @if length($col) > 1 {
          grid-row-end: span nth($col, 2);
        }
      }

      $i: $i + 1;
    }

    > :nth-child(n) {
      width: auto;
      margin: 0;
    }
  }
}

.gallery-grid {
  @include grid;
  @include gridAuto(260px);

  div {
    height: 100px;
  }
}

.two-dimensional-grid {
  height: 400px;

  @include grid;
  @include gridLayout((7, 2), (5, 1), (5, 1), (12, 1));

  div {
    height: auto;
  }
}
